syntax = "proto3";

option java_package = "org.spin.proto.pos.homologation";
option java_multiple_files = true;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

import "base_data_type.proto";

package pos.homologation;

// System Info
message GetSystemInfoRequest {
	// empty request
}
message SystemInfo {
	// pos homologation
	google.protobuf.Timestamp date_version = 1;
	string main_version = 2;
	string implementation_version = 3;
}


// Request for process a order
message ProcessOrderRequest {
	int32 pos_id = 1;
	int32 id = 2;
	bool create_payments = 3;
	bool is_open_refund = 4;
}


// Request for simulate process a order
message SimulateProcessOrderRequest {
	int32 pos_id = 1;
	int32 id = 2;
	bool create_payments = 3;
	bool is_open_refund = 4;
	repeated CreatePaymentRequest payments = 6;
}
message CreatePaymentRequest {
	string uuid = 2;
	int32 id = 3;
	string pos_uuid = 4;
	string order_uuid = 5;
	string invoice_uuid = 6;
	string bank_uuid = 7;
	string reference_no = 8;
	string description = 9;
	data.Decimal amount = 10;
	string payment_date = 11;
	string tender_type_code = 12;
	string currency_uuid = 13;
	string payment_method_uuid = 14;
	string payment_account_date = 15;
	bool is_refund = 16;
	string charge_uuid = 17;
	string collecting_agent_uuid = 18;
	string reference_bank_account_uuid = 19;
	string customer_bank_account_uuid = 20;
	int32 invoice_reference_id = 21;
}


//	Print Ticket
message ProcessWithoutPrintRequest {
	int32 pos_id = 1;
	int32 order_id = 2;
	int32 invoice_id = 3;
}


//	Response after print
message PrintTicketResponse {
	string summary = 1;
	bool is_error = 2;
	string file_name = 3;
	string mime_type = 4;
	bytes output_stream = 5;
	string result_type = 6;
	google.protobuf.Value result_values = 7;
}


// The greeting service definition.
service PosHomologationService {
	// Get a System Information
	rpc GetSystemInfo(GetSystemInfoRequest) returns (SystemInfo) {
		option (google.api.http) = {
			get: "/v1/pos/homologation/system-info"
		};
	}

	// Process Order
	rpc SimulateProcessOrder(SimulateProcessOrderRequest) returns (PrintTicketResponse) {
		option (google.api.http) = {
			post: "/v1/pos/homologation/{pos_id}/process/simulate",
			body: "*"
		};
	}

	//	Process without Print
	rpc ProcessWithoutPrint(ProcessWithoutPrintRequest) returns (PrintTicketResponse) {
		option (google.api.http) = {
			post: "/v1/pos/homologation/{pos_id}/process",
			body: "*"
		};
	}

}
